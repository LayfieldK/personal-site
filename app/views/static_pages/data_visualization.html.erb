<div class="row">
          <div id="RomanEmperorScatterplot" class="box">
              <div class="col-lg-12 text-center">
                  <script>
                    d3.csv("RomanEmperorsDates.csv", function(error, data) {
                  
                    //roman emperors scatterplot - 
                    //	x axis is year
                    //	y axis is years in office at death
                    //	color of circle is death type
                    var margin = {top: 20, right: 20, bottom: 30, left: 40},
                        width = 1110 - margin.left - margin.right,
                        height = 500 - margin.top - margin.bottom;
                    
                    /* 
                     * value accessor - returns the value to encode for a given data object.
                     * scale - maps value to a visual display encoding, such as a pixel position.
                     * map function - maps from data value to display value
                     * axis - sets up axis
                     */ 
                     
                   var format = d3.time.format("%m/%d/%Y");
                   var xAxisFormat = d3.time.format("%Y");
                    // setup x 
                    var xValue = function(d) { return d.EndYear.getTime();}, // data -> value
                        xScale = d3.time.scale().range([0, width - 40]), // value -> display
                        xMap = function(d) { return xScale(xValue(d));}, // data -> display
                        xAxis = d3.svg.axis().scale(xScale).orient("bottom").tickFormat(xAxisFormat);
                    
                    // setup y
                    var yValue = function(d) { 
                          return (d.EndYear.getTime() - d.BeganYear.getTime()) / 1000 / 60 / 60 / 24 / 365;
                      
                    }, // data -> value
                        yScale = d3.scale.linear().range([height, 0]), // value -> display
                        yMap = function(d) { return yScale(yValue(d));}, // data -> display
                        yAxis = d3.svg.axis().scale(yScale).orient("left");
                    
                    // setup fill color
                    var cValue = function(d) { return d.EndType;},
                        color = d3.scale.category10();
                        
                        
                    
                    
                    // add the graph canvas to the body of the webpage
                    var svg5 = d3.select("#RomanEmperorScatterplot").append("svg")
                        .attr("width", width + margin.left + margin.right)
                        .attr("height", height + margin.top + margin.bottom)
                      .append("g")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
                        .call(d3.behavior.zoom().x(xScale).y(yScale).scaleExtent([1, 8]).on("zoom", zoom));
                        
                    
                    
                    // add the tooltip area to the webpage
                    var tooltip = d3.select("body").append("div")
                        .attr("class", "tooltip")
                        .style("opacity", 0);
                    
                    // load data
                   
                    
                      data.forEach(function(d) {
                        if (d.BeganYear.indexOf("-") > -1){
                            d.BeganYear = d.BeganYear.replace("-", "");
                            d.BeganYear = format.parse(d.BeganYear);
                            d.BeganYear.setFullYear(-d.BeganYear.getFullYear()); 
                            
                            
                        }else{
                           d.BeganYear = format.parse(d.BeganYear);
                        }
                        
                        if (d.EndYear.indexOf("-") > -1){
                            d.EndYear = d.EndYear.replace("-", "");
                            d.EndYear = format.parse(d.EndYear);
                            d.EndYear.setFullYear(-d.EndYear.getFullYear()); 
                            
                            
                        }else{
                           d.EndYear = format.parse(d.EndYear);
                        }
                       
                        //console.log(d.BeganYear);
                      });
                    
                      // don't want dots overlapping axis, so add in buffer to data domain
                      xScale.domain([d3.min(data, xValue)-1, d3.max(data, xValue)+1]);
                      yScale.domain([d3.min(data, yValue)-1, d3.max(data, yValue)+1]);
                      
                      svg5.append("rect")
                      .attr("width", width)
                      .attr("height", height);
                    
                      // x-axis
                      svg5.append("g")
                          .attr("class", "x axis")
                          .attr("transform", "translate(0," + height + ")")
                          .call(xAxis)
                          .append("text")
                          .attr("class", "label")
                          .attr("x", width)
                          .attr("y", -6)
                          .style("text-anchor", "end")
                          .text("Last Year as Emperor");
                    
                      // y-axis
                      svg5.append("g")
                          .attr("class", "y axis")
                          .call(yAxis)
                          .append("text")
                          .attr("class", "label")
                          .attr("transform", "rotate(-90)")
                          .attr("y", 6)
                          .attr("dy", ".71em")
                          .style("text-anchor", "end")
                          .text("Years in Office");
                    
                    
                      // draw dots
                      svg5.selectAll(".dot")
                          .data(data)
                        .enter().append("circle")
                          .attr("class", "dot")
                          .attr("r", 3.5)
                          .attr("cx", xMap)
                          .attr("cy", yMap)
                          .style("fill", function(d) { return color(cValue(d));}) 
                          .on("mouseover", function(d) {
                              tooltip.transition()
                                   .duration(200)
                                   .style("opacity", .9);
                              tooltip.html(d.Name + ": " + d.EndType + " after " + yValue(d) + " years")
                                   .style("left", (d3.event.pageX + 5) + "px")
                                   .style("top", (d3.event.pageY - 28) + "px");
                          })
                          .on("mouseout", function(d) {
                              tooltip.transition()
                                   .duration(500)
                                   .style("opacity", 0);
                          });
                    
                      // draw legend
                      var legend = svg5.selectAll(".legend")
                          .data(color.domain())
                        .enter().append("g")
                          .attr("class", "legend")
                          .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });
                    
                      // draw legend colored rectangles
                      legend.append("rect")
                          .attr("x", width - 18)
                          .attr("width", 18)
                          .attr("height", 18)
                          .style("fill", color);
                    
                      // draw legend text
                      legend.append("text")
                          .attr("x", width - 24)
                          .attr("y", 9)
                          .attr("dy", ".35em")
                          .style("text-anchor", "end")
                          .text(function(d) { return d;})
                   
                    
                    function zoom() {
                      
                      svg5.select(".x.axis").call(xAxis);
                		  svg5.select(".y.axis").call(yAxis);
                      
                      
                    }
                    });
                    </script>
                  
                  
              </div>
           </div>
</div>












<style>
body {
  font: 11px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.dot {
  stroke: #000;
}

.tooltip {
  position: absolute;
  width: 200px;
  height: 28px;
  pointer-events: none;
}

.overlay {
  fill: none;
  pointer-events: all;
}
</style>
<body>
<script src="http://d3js.org/d3.v3.min.js"></script>


