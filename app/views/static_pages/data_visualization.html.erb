<div class="row">
          <div  class="box">
              <div class="col-lg-12 text-center">
              	<div class="col-lg-12 text-center">

After reading Mike Bostock's AMA on the Data is Beautiful subreddit, I had become interested in trying my hand at some data visualization using d3.js.  After a few nights of hard thinking on <i>what I could actually visualize,</i> I decided to chart some information about the reigns of the Roman Emperors.  All of my information was extracted from Wikipedia, and some of the data was interpreted subjectively, so the following charts can't be taken as 100% fact.

I've added a few features to the scatterplot to make it a bit more fun.  First, you can pan and zoom the chart.  This helps to distinguish between Emperors in cases where many of them died around the same time.  For example on the first chart below, you'll see three emperors die in the year 69 AD.  Another feature I added is a mouseover tooltip for each data point.  Depending on which chart you look at, the tooltip will reveal different information.  I also made it possible to turn on and off different series of data by clicking on the colored squares in the legend for each chart.

<div id="RomanEmperorScatterplot"></div>

The first chart I created shows the years of the ends of each emperor's reign vs the number of years in their reign in a scatterplot.  With just those two pieces of information being plotted, there isn't much to be learned.  Therefore, I also color-coded the method of their removal from office - illustrating the method in which they were removed from office.  This reveals some much more interesting data.  For instance, one will notice that when an emperor reaches about twenty years in his reign, his chances of dying by natural causes go way up.  There are two reasons I can see for this.  First, If you're an emperor in your twentieth year, chances are that you're so old that you're on death's door.  Second, if you were an emperor likely to anger the legions, the praetorian guard, the senate, or any other would-be assassin, you would have probably been dealt with way before the twenty year marker.  Another aspect of the this chart that I really enjoy is the time on the graph between 200 AD and 300 AD.  There's a reason why they call it the "Crisis of the Third Century," and this scatterplot helps to show why.  So many emperors died in such a short timeframe, and hardly any of them were due to natural causes.  Rather, we see the Praetorian Guard, assassins, and Roman generals murdering the emperors.  That's not to say that the Empire didn't face external threat during the crisis, if you'll notice, Emperor Valerian was captured by the Sassanids during the crisis, never to be heard from again.

<div id="RomanEmperorAgeVsReign"></div >

This chart works very similarly to the first chart, but it plots different data.  It compares the age of an Emperor upon his ascension to the number of years that his reign lasted.  This chart also has color coded data points, this time showcasing the method in which they ascended to Augustus.  I'm not sure that this chart is useful in discerning information, but there are a few points of note.  First, blood adoption is clearly the best way to become Emperor at a young age.  Second, most of the "Five Good Emperors" are quite easy to spot on the chart.  The Five Good Emperors all adopted their heirs consecutively and brought about a Roman golden age.  It ended when Marcus Aurelius had a natural born son named Commodus, and he kicked off the decline and fall of the Roman Empire.  Anyway, you can spot most of the five good emperors on the chart because they are all adoptive heirs and they have great staying power after ascending to the purple.

I'm sure much of this data could be better analyzed by using some hard numbers and math, but I thought it would be interesting to see the data visually.  I really enjoy using d3.js.  It took a bit to finally understand how it all works, but luckily there are tons of useful examples out there.  I'd love to explore some of the more complex chart types that d3.js is capable of creating, but this was a nice starting project.
</div >          

<style>

#RomanEmperorScatterplot svg {
	font-family:'Trade Gothic Next W01',sans-serif;
	/*background:rgba(255,255,255,0.3);
	border:1px solid rgba(255,255,255,0.6);*/
}
#RomanEmperorScatterplot rect {
	fill: transparent;
	shape-rendering: crispEdges;
}
#RomanEmperorScatterplot .hex {
}
#RomanEmperorScatterplot .active {
	z-index:5;
	position:relative;
}
#RomanEmperorScatterplot .inactive polygon {
	fill:#aaa;
	opacity:0.1;
}
#RomanEmperorScatterplot .axis {
}
#RomanEmperorScatterplot .axis path,
#RomanEmperorScatterplot .axis line {
	fill: none;
	stroke: rgba(0,0,0,0.1);
	shape-rendering: crispEdges;
}
#RomanEmperorScatterplot .axis text {
	font-family: sans-serif;
	font-size: 11px;
	fill: #666;
}
#RomanEmperorScatterplot .legend text {
	font-family: sans-serif;
	font-size: 11px;
	fill: #666;
}
#RomanEmperorScatterplot .label {
	font-size:14px;
	fill:rgba(0,0,0,0.5);
	shape-rendering:auto;
}

#RomanEmperorScatterplot fonts {
	font-family:'TradeGothicNextW01-Ligh 693250';
	font-family:'Trade Gothic Next W01';
	font-family:'TradeGothicNextW01-Bold 693229';
	font-family:'TradeGothicNextW01-BdCm';
}


#RomanEmperorAgeVsReign svg {
	font-family:'Trade Gothic Next W01',sans-serif;
	/*background:rgba(255,255,255,0.3);
	border:1px solid rgba(255,255,255,0.6);*/
}
#RomanEmperorAgeVsReign rect {
	fill: transparent;
	shape-rendering: crispEdges;
}
#RomanEmperorAgeVsReign .hex {
}
#RomanEmperorAgeVsReign .active {
	z-index:5;
	position:relative;
}
#RomanEmperorAgeVsReign .inactive polygon {
	fill:#aaa;
	opacity:0.1;
}
#RomanEmperorAgeVsReign .axis {
}
#RomanEmperorAgeVsReign .axis path,
#RomanEmperorAgeVsReign .axis line {
	fill: none;
	stroke: rgba(0,0,0,0.1);
	shape-rendering: crispEdges;
}
#RomanEmperorAgeVsReign .axis text {
	font-family: sans-serif;
	font-size: 11px;
	fill: #666;
}
#RomanEmperorAgeVsReign .legend text {
	font-family: sans-serif;
	font-size: 11px;
	fill: #666;
}
#RomanEmperorAgeVsReign .label {
	font-size:14px;
	fill:rgba(0,0,0,0.5);
	shape-rendering:auto;
}

#RomanEmperorAgeVsReign fonts {
	font-family:'TradeGothicNextW01-Ligh 693250';
	font-family:'Trade Gothic Next W01';
	font-family:'TradeGothicNextW01-Bold 693229';
	font-family:'TradeGothicNextW01-BdCm';
}

  
</style>
<script>
                      d3.csv("/RomanEmperorsDates.csv", function(error, data) {
		var margin = {top: 30, right: 10, bottom: 50, left: 60},
			width = 1110 - margin.left - margin.right,
			legendWidthOffset = 115;
			height = 500 - margin.top - margin.bottom;
			
		var aR = width / height;
		var format = d3.time.format("%m/%d/%Y");
    var xAxisFormat = d3.time.format("%Y");
    
    data.forEach(function(d) {
                        if (d.BeganYear.indexOf("-") > -1){
                            d.BeganYear = d.BeganYear.replace("-", "");
                            d.BeganYear = format.parse(d.BeganYear);
                            d.BeganYear.setFullYear(-d.BeganYear.getFullYear()); 
                            
                            
                        }else{
                           d.BeganYear = format.parse(d.BeganYear);
                        }
                        
                        if (d.EndYear.indexOf("-") > -1){
                            d.EndYear = d.EndYear.replace("-", "");
                            d.EndYear = format.parse(d.EndYear);
                            d.EndYear.setFullYear(-d.EndYear.getFullYear()); 
                            
                            
                        }else{
                           d.EndYear = format.parse(d.EndYear);
                        }
                       
                        //console.log(d.BeganYear);
                      });
		
		var xMax = d3.max(data, function(d) { 
		   return d.EndYear.getTime();
		}),
			xMin = d3.min(data, function(d) { 
		   return d.EndYear.getTime();
		}),
			yMax = d3.max(data, function(d) { return (d.EndYear.getTime() - d.BeganYear.getTime()) / 1000 / 60 / 60 / 24 / 365; }),
			yMin = 0;
		
		//Define scales
		var x = d3.time.scale()
			.domain([xMin, xMax])
			.range([0, width-legendWidthOffset]);
			
		var y = d3.scale.linear()
			.domain([yMin, yMax])
			.range([height, 0]);
			
		var colourScale = function(val){
			var colours = ['#9d3d38','#c5653a','#f9b743','#9bd6d7'];
			if (val > 30) {
				return colours[0];
			} else if (val > 10) {
				return colours[1];
			} else if (val > 0) {
				return colours[2];
			} else {
				return colours[3];
			}
		};
		
		var cValue = function(d) { return d.EndType;},
                        color = d3.scale.category10();
		
		var tooltip = d3.select("body").append("div")
                        .attr("class", "tooltip")
                        .style("opacity", 0);
		
		//Define X axis
		var xAxis = d3.svg.axis()
			.scale(x)
			.orient("bottom")
			.tickSize(-height)
			;
		
		//Define Y axis
		var yAxis = d3.svg.axis()
			.scale(y)
			.orient("left")
			.ticks(5)
			.tickSize(-width+legendWidthOffset)
			;
			
		var realSvg  = d3.select("#RomanEmperorScatterplot")
			.append("svg")
			.attr("class", "RomanEmperorScatterplotSVG")
			.attr("width", width  + margin.left + margin.right)
			.attr("height", height + margin.top + margin.bottom)
			.attr("viewBox", "0 0 " + (width + margin.left + margin.right) + " " + (height + margin.top + margin.bottom))
			.attr("preserveAspectRatio", "xMidYMid")
		var svg = realSvg
			.append("g")
			.attr("transform", "translate(" + margin.left + "," + margin.top + ")")
			.call(d3.behavior.zoom().x(x).xExtent([xMin,xMax]).y(y).yExtent([0,60]).scaleExtent([1, 8]).on("zoom", redraw)).on("dblclick.zoom", null);
		
			
		svg.append("text")
      .attr("class", "title label")
      .attr("x", width/2)
      .attr("y", 0 - (margin.top / 2))
      .attr("text-anchor", "middle")
      .text("Roman Emperors: Ending Their Reigns");	 
		
		var rect = svg.append("rect")
			.attr("width", width-legendWidthOffset)
			.attr("height", height)
			.attr("pointer-events", "all");
		
		
		svg.append("g")
			.attr("class", "x axis")
			.attr("transform", "translate(0," + height + ")")
			.call(xAxis);
			
		svg.append("text")
    .attr("class", "x label")
    .attr("text-anchor", "middle")
    .attr("x", (width - legendWidthOffset) /2)
    .attr("y", height +  margin.bottom - 6)
    .text("Last Year of Reign");
		
		svg.append("g")
			.attr("class", "y axis")
			.call(yAxis);
			
		svg.append("text")
    .attr("class", "y label")
    .attr("text-anchor", "middle")
    .attr("x", height / 2)
    .attr("y", margin.left / 2)
    .attr("dy", ".75em")
    .attr("transform", "rotate(90)")
    .text("Years Between Beginning and End of Reign");
    
			
		var clip = svg.append("svg:clipPath")
    .attr("id", "clip")
    .append("svg:rect")
    .attr("x", 0)
    .attr("y", 0)
    .attr("width", width - legendWidthOffset)
    .attr("height", height);
    
    var chartBody = svg.append("g")
    .attr("clip-path", "url(#clip)");

		
		var poly = chartBody.selectAll("polygon")
			.data(data)
			.enter()
			.append("polygon")
      .attr("class","hex")
			.attr("transform", function(d, i) {
				return getPointPlacementString(d);
			})
			.attr("key", function(d, i) {
				return d.EndType;
			})
			.attr('points','4.569,2.637 0,5.276 -4.569,2.637 -4.569,-2.637 0,-5.276 4.569,-2.637')
			.style("opacity","1")
			.style("fill", function(d) { return color(cValue(d));}) 
		 	.on("mouseover", function(d) {
		 		if(this.style.opacity != "0"){
          tooltip.transition()
               .duration(200)
               .style("opacity", .9);
          tooltip.html(d.Name + "<br>Reign Ended By: " + d.EndType + "<br>Reign Duration: " + ((d.EndYear.getTime() - d.BeganYear.getTime()) / 1000 / 60 / 60 / 24 / 365).toFixed(1) + " years")
               .style("left", (d3.event.pageX + 5) + "px")
               .style("top", (d3.event.pageY - 28) + "px");
		 		}
      })
      .on("mouseout", function(d) {
          tooltip.html("");
      });
      
     // draw legend
                      var legend = svg.selectAll("#RomanEmperorScatterplot .legend")
                          .data(color.domain())
                        .enter().append("g")
                          .attr("class", "legend")
                          .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });
                    
										                      // draw legend empty rectangles 
										  legend.append("rect")
										      .attr("x", width - 18)
                          .attr("width", 18)
                          .attr("height", 18)
										      .attr("border", 1)
										      .style("stroke", 'black')
										      .style("stroke-width", 1)
										      .style("fill", 'white')
										      ;
                    
                      // draw legend colored rectangles
                      legend.append("rect")
                          .attr("x", width - 18)
                          .attr("width", 18)
                          .attr("height", 18)
                          .style("stroke", 'black')
      										.style("stroke-width", 1)
                          .style("opacity",1)
                          .style("fill", color)
                          .attr("key", function(d, i) {
														return d;
													})
                          .on("click", function (d, i) {
                      // register on click event
                      console.log(this);
                      console.log ('opacity:' + this.style.opacity  );
                      var lVisibility = this.style.opacity 
                      console.log ('lVisibility:' + lVisibility  );
                      filterGraph(d, lVisibility);
                   });
                          
                    
                      // draw legend text
                      legend.append("text")
                          .attr("x", width - 24)
                          .attr("y", 9)
                          .attr("dy", ".35em")
                          .style("text-anchor", "end")
                          .text(function(d) { return d;});
                          
    function filterGraph( aType, aVisibility) {
        newOpacity = 1 - aVisibility ;
        
        d3.selectAll("polygon[key='" + aType + "']").style("opacity", newOpacity); 
        d3.selectAll("rect[key='" + aType + "']").style("opacity", newOpacity); 
    }                      
		
		function getPointPlacementString(d){
			return "translate("+x(d.EndYear.getTime())+","+y((d.EndYear.getTime() - d.BeganYear.getTime()) / 1000 / 60 / 60 / 24 / 365)+")";
		}
		
		function redraw() {
			
			
			
		  svg.select(".x.axis").call(xAxis);
		  svg.select(".y.axis").call(yAxis);
      chartBody.selectAll("polygon")			
      .attr("transform", function(d, i) {
				return getPointPlacementString(d);
			})
      .attr('points','4.569,2.637 0,5.276 -4.569,2.637 -4.569,-2.637 0,-5.276 4.569,-2.637');
      
      width  = parseFloat(d3.select("#RomanEmperorScatterplot").style("width")) - margin.left - margin.right;
			height  = width/aR  ;
			svg.attr("width",width)
				.attr("height",height)
			;
			//rect.attr("width",newWidth-legendWidthOffset)
			//	.attr("height",newHeight);
			realSvg.attr("width",width)
				.attr("height",height)
				.attr("width", width  + margin.left + margin.right)
				.attr("height", height + margin.top + margin.bottom)
				;

		}
		d3.select(window).on('resize', redraw);
		redraw();

});
                  </script>
<script>
                      d3.csv("/RomanEmperorsDates.csv", function(error, data) {
                      	
   var data = data.filter(function(d) 
		{ 
				console.log(d.BirthYear);
        if( d.BirthYear != null && d.BirthYear != "")
        { 
            return d;
        } 

    });
    
		var margin = {top: 30, right: 10, bottom: 50, left: 60},
			width = 1110 - margin.left - margin.right,
			legendWidthOffset = 160;
			height = 500 - margin.top - margin.bottom;
			
		var aR = width / height;
		var format = d3.time.format("%m/%d/%Y");

    
    data.forEach(function(d) {
                        if (d.BeganYear.indexOf("-") > -1){
                            d.BeganYear = d.BeganYear.replace("-", "");
                            d.BeganYear = format.parse(d.BeganYear);
                            d.BeganYear.setFullYear(-d.BeganYear.getFullYear()); 
                            
                            
                        }else{
                           d.BeganYear = format.parse(d.BeganYear);
                        }
                        
                        if (d.EndYear.indexOf("-") > -1){
                            d.EndYear = d.EndYear.replace("-", "");
                            d.EndYear = format.parse(d.EndYear);
                            d.EndYear.setFullYear(-d.EndYear.getFullYear()); 
                            
                            
                        }else{
                           d.EndYear = format.parse(d.EndYear);
                        }
                       
                        //console.log(d.BeganYear);
                      });
		
		var xMax = d3.max(data, function(d) { 
		   return d.BeganYear.getFullYear() - d.BirthYear + 5;
		}),
			xMin = d3.min(data, function(d) { 
		   return d.BeganYear.getFullYear() - d.BirthYear - 5;
		}),
			yMax = d3.max(data, function(d) { return (d.EndYear.getTime() - d.BeganYear.getTime()) / 1000 / 60 / 60 / 24 / 365 + 5; }),
			yMin = 0;
		
		//Define scales
		var x = d3.scale.linear()
			.domain([xMin, xMax])
			.range([0, width-legendWidthOffset]);
			
		var y = d3.scale.linear()
			.domain([yMin, yMax])
			.range([height, 0]);
			
		var colourScale = function(val){
			var colours = ['#9d3d38','#c5653a','#f9b743','#9bd6d7'];
			if (val > 30) {
				return colours[0];
			} else if (val > 10) {
				return colours[1];
			} else if (val > 0) {
				return colours[2];
			} else {
				return colours[3];
			}
		};
		
		var cValue = function(d) { return d.BeginType;},
                        color = d3.scale.category10();
		
		var tooltip = d3.select("body").append("div")
                        .attr("class", "tooltip")
                        .style("opacity", 0);
		
		//Define X axis
		var xAxis = d3.svg.axis()
			.scale(x)
			.orient("bottom")
			.tickSize(-height)
			;
		
		//Define Y axis
		var yAxis = d3.svg.axis()
			.scale(y)
			.orient("left")
			.ticks(5)
			.tickSize(-width+legendWidthOffset)
			;
			
		var realSvg =  d3.select("#RomanEmperorAgeVsReign")
			.append("svg")
			.attr("class", "RomanEmperorAgeVsReignSVG")
			.attr("width", width  + margin.left + margin.right)
			.attr("height", height + margin.top + margin.bottom)
			.attr("viewBox", "0 0 " + (width + margin.left + margin.right) + " " + (height + margin.top + margin.bottom))
			.attr("preserveAspectRatio", "xMidYMid")
		var svg = realSvg
			.append("g")
			.attr("transform", "translate(" + margin.left + "," + margin.top + ")")
			.call(d3.behavior.zoom().x(x).xExtent([0,xMax]).y(y).yExtent([0,60]).scaleExtent([1, 8]).on("zoom", redraw)).on("dblclick.zoom", null);
		
			
		svg.append("text")
      .attr("class", "title label")
      .attr("x", width/2)
      .attr("y", 0 - (margin.top / 2))
      .attr("text-anchor", "middle")
      .text("Roman Emperors: Age Upon Becoming Emperor vs Years of Reign");	 
		
		var rect = svg.append("rect")
			.attr("width", width-legendWidthOffset)
			.attr("height", height)
			.attr("pointer-events", "all");
		
		
		svg.append("g")
			.attr("class", "x axis")
			.attr("transform", "translate(0," + height + ")")
			.call(xAxis);
			
		svg.append("text")
    .attr("class", "x label")
    .attr("text-anchor", "middle")
    .attr("x", (width - legendWidthOffset) /2)
    .attr("y", height +  margin.bottom - 6)
    .text("Age of Becoming Emperor");
		
		svg.append("g")
			.attr("class", "y axis")
			.call(yAxis);
			
		svg.append("text")
    .attr("class", "y label")
    .attr("text-anchor", "middle")
    .attr("x", height / 2)
    .attr("y", margin.left / 2)
    .attr("dy", ".75em")
    .attr("transform", "rotate(90)")
    .text("Years Between Beginning and End of Reign");
    
			
		var clip = svg.append("svg:clipPath")
    .attr("id", "clip")
    .append("svg:rect")
    .attr("x", 0)
    .attr("y", 0)
    .attr("width", width - legendWidthOffset)
    .attr("height", height);
    
    var chartBody = svg.append("g")
    .attr("clip-path", "url(#clip)");

		
		var poly = chartBody.selectAll("polygon")
			.data(data)
			.enter()
			.append("polygon")
      .attr("class","hex")
			.attr("transform", function(d, i) {
				return getPointPlacementString(d);
			})
			.attr("key", function(d, i) {
				return d.BeginType;
			})
			.attr('points','4.569,2.637 0,5.276 -4.569,2.637 -4.569,-2.637 0,-5.276 4.569,-2.637')
			.style("opacity","1")
			.style("fill", function(d) { return color(cValue(d));}) 
		 	.on("mouseover", function(d) {
		 		if(this.style.opacity != "0"){
          tooltip.transition()
               .duration(200)
               .style("opacity", .9);
          tooltip.html(d.Name + "<br>Reign Began By: " + d.BeginType + "<br>Age at Ascension: " + (d.BeganYear.getFullYear() - d.BirthYear) + "<br>Reign Duration: " + ((d.EndYear.getTime() - d.BeganYear.getTime()) / 1000 / 60 / 60 / 24 / 365).toFixed(1) + " years")
               .style("left", (d3.event.pageX + 5) + "px")
               .style("top", (d3.event.pageY - 28) + "px");
		 		}
      })
      .on("mouseout", function(d) {
          tooltip.html("");
      });
      
     // draw legend
                      var legend = svg.selectAll("#RomanEmperorAgeVsReign .legend")
                          .data(color.domain())
                        .enter().append("g")
                          .attr("class", "legend")
                          .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });
                    
										                      // draw legend empty rectangles 
										  legend.append("rect")
										      .attr("x", width - 18)
                          .attr("width", 18)
                          .attr("height", 18)
										      .attr("border", 1)
										      .style("stroke", 'black')
										      .style("stroke-width", 1)
										      .style("fill", 'white')
										      ;
                    
                      // draw legend colored rectangles
                      legend.append("rect")
                          .attr("x", width - 18)
                          .attr("width", 18)
                          .attr("height", 18)
                          .style("stroke", 'black')
      										.style("stroke-width", 1)
                          .style("opacity",1)
                          .style("fill", color)
                          .attr("key", function(d, i) {
														return d;
													})
                          .on("click", function (d, i) {
                      // register on click event
                      console.log(this);
                      console.log ('opacity:' + this.style.opacity  );
                      var lVisibility = this.style.opacity 
                      console.log ('lVisibility:' + lVisibility  );
                      filterGraph(d, lVisibility);
                   });
                          
                    
                      // draw legend text
                      legend.append("text")
                          .attr("x", width - 24)
                          .attr("y", 9)
                          .attr("dy", ".35em")
                          .style("text-anchor", "end")
                          .text(function(d) { return d;});
                          
    function filterGraph( aType, aVisibility) {
        newOpacity = 1 - aVisibility ;
        
        d3.selectAll("polygon[key='" + aType + "']").style("opacity", newOpacity); 
        d3.selectAll("rect[key='" + aType + "']").style("opacity", newOpacity); 
    }                      
		
		function getPointPlacementString(d){
			return "translate("+x(d.BeganYear.getFullYear() - d.BirthYear)+","+y((d.EndYear.getTime() - d.BeganYear.getTime()) / 1000 / 60 / 60 / 24 / 365) + ")";
		}
		
		function redraw() {
			
			
			
		  svg.select(".x.axis").call(xAxis);
		  svg.select(".y.axis").call(yAxis);
      chartBody.selectAll("polygon")			
      .attr("transform", function(d, i) {
				return getPointPlacementString(d);
			})
      .attr('points','4.569,2.637 0,5.276 -4.569,2.637 -4.569,-2.637 0,-5.276 4.569,-2.637');
      
      width  = parseFloat(d3.select("#RomanEmperorAgeVsReign").style("width")) - margin.left - margin.right;
			height  = width/aR  ;
			svg.attr("width",width)
				.attr("height",height)
			;
			//rect.attr("width",newWidth-legendWidthOffset)
			//	.attr("height",newHeight);
			realSvg.attr("width",width)
				.attr("height",height)
				.attr("width", width  + margin.left + margin.right)
				.attr("height", height + margin.top + margin.bottom)
				;

		}
		d3.select(window).on('resize', redraw);
		redraw();

});
                  </script>
    <hr>
    Tags: <a href="/tags/web-development">web-development</a>, <a href="/tags/programming">programming</a>, <a href="/tags/rome">rome</a>, <a href="/tags/d3.js">d3.js</a>, <a href="/tags/data%20visualization">data visualization</a>
    <hr>
</div>
              	</div>
          </div>