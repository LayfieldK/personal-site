<script src="d3-zoom-pan-extent.js"></script>
<style>

/* ==========================================================================
   Author's custom styles
   ========================================================================== */
body {
	background:#fefdf5;
	font-family:'Trade Gothic Next W01',sans-serif;
	color:#333;
}


		svg {
			font-family:'Trade Gothic Next W01',sans-serif;
			/*background:rgba(255,255,255,0.3);
			border:1px solid rgba(255,255,255,0.6);*/
		}
			rect {
				fill: transparent;
				shape-rendering: crispEdges;
			}
			.hex {
			}
			.active {
				z-index:5;
				position:relative;
			}
			.inactive polygon {
				fill:#aaa;
				opacity:0.1;
			}
			.axis {
			}
				.axis path,
				.axis line {
					fill: none;
					stroke: rgba(0,0,0,0.1);
					shape-rendering: crispEdges;
				}
				.axis text {
					font-family: sans-serif;
					font-size: 11px;
					fill: #666;
				}
				.legend text {
					font-family: sans-serif;
					font-size: 11px;
					fill: #666;
				}
			.label {
				font-size:14px;
				fill:rgba(0,0,0,0.5);
				shape-rendering:auto;
			}
		
fonts {
	font-family:'TradeGothicNextW01-Ligh 693250';
	font-family:'Trade Gothic Next W01';
	font-family:'TradeGothicNextW01-Bold 693229';
	font-family:'TradeGothicNextW01-BdCm';
}




  
</style>

<div class="row">
          <div  class="box">
              <div class="col-lg-12 text-center">
              		<div id="RomanEmperorScatterplot">
                  <script>
                      d3.csv("RomanEmperorsDates.csv", function(error, data) {
		var margin = {top: 30, right: 10, bottom: 50, left: 60},
			width = 1110 - margin.left - margin.right,
			legendWidthOffset = 115;
			height = 500 - margin.top - margin.bottom;
			
		var aR = width / height;
		var format = d3.time.format("%m/%d/%Y");
    var xAxisFormat = d3.time.format("%Y");
    
    data.forEach(function(d) {
                        if (d.BeganYear.indexOf("-") > -1){
                            d.BeganYear = d.BeganYear.replace("-", "");
                            d.BeganYear = format.parse(d.BeganYear);
                            d.BeganYear.setFullYear(-d.BeganYear.getFullYear()); 
                            
                            
                        }else{
                           d.BeganYear = format.parse(d.BeganYear);
                        }
                        
                        if (d.EndYear.indexOf("-") > -1){
                            d.EndYear = d.EndYear.replace("-", "");
                            d.EndYear = format.parse(d.EndYear);
                            d.EndYear.setFullYear(-d.EndYear.getFullYear()); 
                            
                            
                        }else{
                           d.EndYear = format.parse(d.EndYear);
                        }
                       
                        //console.log(d.BeganYear);
                      });
		
		var xMax = d3.max(data, function(d) { 
		   return d.EndYear.getTime();
		}),
			xMin = d3.min(data, function(d) { 
		   return d.EndYear.getTime();
		}),
			yMax = d3.max(data, function(d) { return (d.EndYear.getTime() - d.BeganYear.getTime()) / 1000 / 60 / 60 / 24 / 365; }),
			yMin = 0;
		
		//Define scales
		var x = d3.time.scale()
			.domain([xMin, xMax])
			.range([0, width-legendWidthOffset]);
			
		var y = d3.scale.linear()
			.domain([yMin, yMax])
			.range([height, 0]);
			
		var colourScale = function(val){
			var colours = ['#9d3d38','#c5653a','#f9b743','#9bd6d7'];
			if (val > 30) {
				return colours[0];
			} else if (val > 10) {
				return colours[1];
			} else if (val > 0) {
				return colours[2];
			} else {
				return colours[3];
			}
		};
		
		var cValue = function(d) { return d.EndType;},
                        color = d3.scale.category10();
		
		var tooltip = d3.select("body").append("div")
                        .attr("class", "tooltip")
                        .style("opacity", 0);
		
		//Define X axis
		var xAxis = d3.svg.axis()
			.scale(x)
			.orient("bottom")
			.tickSize(-height)
			;
		
		//Define Y axis
		var yAxis = d3.svg.axis()
			.scale(y)
			.orient("left")
			.ticks(5)
			.tickSize(-width+legendWidthOffset)
			;
			
		var realSvg = svg = d3.select("#RomanEmperorScatterplot")
			.append("svg")
			.attr("class", "RomanEmperorScatterplotSVG")
			.attr("width", width  + margin.left + margin.right)
			.attr("height", height + margin.top + margin.bottom)
			.attr("viewBox", "0 0 " + (width + margin.left + margin.right) + " " + (height + margin.top + margin.bottom))
			.attr("preserveAspectRatio", "xMidYMid")
		var svg = realSvg
			.append("g")
			.attr("transform", "translate(" + margin.left + "," + margin.top + ")")
			.call(d3.behavior.zoom().x(x).xExtent([xMin,xMax]).y(y).yExtent([0,60]).scaleExtent([1, 8]).on("zoom", redraw)).on("dblclick.zoom", null);
		
			
		svg.append("text")
      .attr("class", "title label")
      .attr("x", width/2)
      .attr("y", 0 - (margin.top / 2))
      .attr("text-anchor", "middle")
      .text("Roman Emperors: Ending Their Reigns");	 
		
		var rect = svg.append("rect")
			.attr("width", width-legendWidthOffset)
			.attr("height", height)
			.attr("pointer-events", "all");
		
		
		svg.append("g")
			.attr("class", "x axis")
			.attr("transform", "translate(0," + height + ")")
			.call(xAxis);
			
		svg.append("text")
    .attr("class", "x label")
    .attr("text-anchor", "middle")
    .attr("x", (width - legendWidthOffset) /2)
    .attr("y", height +  margin.bottom - 6)
    .text("Last Year of Reign");
		
		svg.append("g")
			.attr("class", "y axis")
			.call(yAxis);
			
		svg.append("text")
    .attr("class", "y label")
    .attr("text-anchor", "middle")
    .attr("x", height / 2)
    .attr("y", margin.left / 2)
    .attr("dy", ".75em")
    .attr("transform", "rotate(90)")
    .text("Years Between Beginning and End of Reign");
    
			
		var clip = svg.append("svg:clipPath")
    .attr("id", "clip")
    .append("svg:rect")
    .attr("x", 0)
    .attr("y", 0)
    .attr("width", width - legendWidthOffset)
    .attr("height", height);
    
    var chartBody = svg.append("g")
    .attr("clip-path", "url(#clip)");

		
		var poly = chartBody.selectAll("polygon")
			.data(data)
			.enter()
			.append("polygon")
      .attr("class","hex")
			.attr("transform", function(d, i) {
				return getPointPlacementString(d);
			})
			.attr("key", function(d, i) {
				return d.EndType;
			})
			.attr('points','4.569,2.637 0,5.276 -4.569,2.637 -4.569,-2.637 0,-5.276 4.569,-2.637')
			.style("opacity","1")
			.style("fill", function(d) { return color(cValue(d));}) 
		 	.on("mouseover", function(d) {
		 		if(this.style.opacity != "0"){
          tooltip.transition()
               .duration(200)
               .style("opacity", .9);
          tooltip.html(d.Name + "<br>Reign Ended By: " + d.EndType + "<br>Reign Duration: " + ((d.EndYear.getTime() - d.BeganYear.getTime()) / 1000 / 60 / 60 / 24 / 365).toFixed(1) + " years")
               .style("left", (d3.event.pageX + 5) + "px")
               .style("top", (d3.event.pageY - 28) + "px");
		 		}
      })
      .on("mouseout", function(d) {
          tooltip.html("");
      });
      
     // draw legend
                      var legend = svg.selectAll(".legend")
                          .data(color.domain())
                        .enter().append("g")
                          .attr("class", "legend")
                          .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });
                    
										                      // draw legend empty rectangles 
										  legend.append("rect")
										      .attr("x", width - 18)
                          .attr("width", 18)
                          .attr("height", 18)
										      .attr("border", 1)
										      .style("stroke", 'black')
										      .style("stroke-width", 1)
										      .style("fill", 'white')
										      ;
                    
                      // draw legend colored rectangles
                      legend.append("rect")
                          .attr("x", width - 18)
                          .attr("width", 18)
                          .attr("height", 18)
                          .style("stroke", 'black')
      										.style("stroke-width", 1)
                          .style("opacity",1)
                          .style("fill", color)
                          .attr("key", function(d, i) {
														return d;
													})
                          .on("click", function (d, i) {
                      // register on click event
                      console.log(this);
                      console.log ('opacity:' + this.style.opacity  );
                      var lVisibility = this.style.opacity 
                      console.log ('lVisibility:' + lVisibility  );
                      filterGraph(d, lVisibility);
                   });
                          
                    
                      // draw legend text
                      legend.append("text")
                          .attr("x", width - 24)
                          .attr("y", 9)
                          .attr("dy", ".35em")
                          .style("text-anchor", "end")
                          .text(function(d) { return d;});
                          
    function filterGraph( aType, aVisibility) {
        newOpacity = 1 - aVisibility ;
        
        d3.selectAll("polygon[key='" + aType + "']").style("opacity", newOpacity); 
        d3.selectAll("rect[key='" + aType + "']").style("opacity", newOpacity); 
    }                      
		
		function getPointPlacementString(d){
			return "translate("+x(d.EndYear.getTime())+","+y((d.EndYear.getTime() - d.BeganYear.getTime()) / 1000 / 60 / 60 / 24 / 365)+")";
		}
		
		function redraw() {
			
			
			
		  svg.select(".x.axis").call(xAxis);
		  svg.select(".y.axis").call(yAxis);
      chartBody.selectAll("polygon")			
      .attr("transform", function(d, i) {
				return getPointPlacementString(d);
			})
      .attr('points','4.569,2.637 0,5.276 -4.569,2.637 -4.569,-2.637 0,-5.276 4.569,-2.637');
      
      width  = parseFloat(d3.select("#RomanEmperorScatterplot").style("width")) - margin.left - margin.right;
			height  = width/aR  ;
			svg.attr("width",width)
				.attr("height",height)
			;
			//rect.attr("width",newWidth-legendWidthOffset)
			//	.attr("height",newHeight);
			realSvg.attr("width",width)
				.attr("height",height)
				.attr("width", width  + margin.left + margin.right)
				.attr("height", height + margin.top + margin.bottom)
				;

		}
		d3.select(window).on('resize', redraw);
		redraw();

});
                  </script>
                  </div>
              </div>
          </div>
</div>